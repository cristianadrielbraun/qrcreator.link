// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/cristianadrielbraun/qrcreator.link/web/components"
	"github.com/cristianadrielbraun/qrcreator.link/web/components/ui/button"
	"github.com/cristianadrielbraun/qrcreator.link/web/components/ui/icon"
	"github.com/cristianadrielbraun/qrcreator.link/web/components/ui/input"
	"github.com/cristianadrielbraun/qrcreator.link/web/layouts"
)

// Home content: landing input + QR UI
func homeContent() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div x-data=\"qrLanding()\" class=\"relative\"><!-- Single input container: starts lower, then transitions margin to top --><div class=\"mx-auto max-w-xl px-4 transition-all duration-300 ease-out\" :class=\"phase === 'landing' ? 'mt-24' : 'mt-4'\"><div class=\"text-center mb-3\" x-show=\"showTitle\" x-transition.opacity.duration.200ms><h1 class=\"text-2xl md:text-3xl font-semibold tracking-tight\">Create a QR from any URL</h1><p class=\"text-sm text-slate-600 dark:text-slate-400 mt-2\">Paste a link and press enter</p></div><div class=\"relative\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = input.Input(input.Props{
			Type:        input.TypeURL,
			Placeholder: "https://example.com",
			Required:    true,
			Attributes: templ.Attributes{
				"x-model":                "userUrl",
				"x-ref":                  "urlInput",
				"@keydown.enter.prevent": "phase==='landing' ? submit() : resubmit()",
				"@input":                 "if (errorMsg && userUrl) { urlValid = true }",
				":aria-invalid":          "!urlValid && !!userUrl",
				"aria-describedby":       "url-error",
				"inputmode":              "url",
				"autocomplete":           "url",
			},
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = icon.ArrowRight(icon.Props{Size: 18}).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = button.Button(button.Props{Size: button.SizeIcon, Variant: button.VariantDefault, Class: "absolute right-0 top-1/2 -translate-y-1/2", Attributes: templ.Attributes{"@click": "phase==='landing' ? submit() : resubmit()", "aria-label": "Generate QR"}}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<p id=\"url-error\" x-show=\"!urlValid && !!userUrl\" x-cloak class=\"mt-2 text-sm text-destructive\"><span x-text=\"errorMsg || 'Enter a valid URL (e.g., https://example.com)'\"></span></p></div></div><!-- QR body under the top input --><section x-show=\"phase === 'qr'\" x-transition.opacity.duration.250ms class=\"mx-auto max-w-5xl px-4 mt-6\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.QRCodeSection(components.LinkData{Domain: "qrcreator.link", ShortCode: "demo"}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</section><script>\n            function qrLanding() {\n                return {\n                    phase: 'landing',\n                    showTitle: true,\n                    userUrl: '',\n                    urlValid: true,\n                    errorMsg: '',\n                    validateAndNormalize(value) {\n                        if (!value) { return { ok: false, value: '', msg: 'URL cannot be empty' }; }\n                        let v = value.trim();\n                        // If no scheme, assume https\n                        if (!/^[a-zA-Z][a-zA-Z0-9+.-]*:/.test(v)) { v = 'https://' + v; }\n                        try {\n                            const u = new URL(v);\n                            if (!/^https?:$/.test(u.protocol)) { return { ok: false, value: '', msg: 'Only http and https URLs are supported' }; }\n                            if (!u.hostname) { return { ok: false, value: '', msg: 'URL must include a valid host' }; }\n                            return { ok: true, value: u.toString(), msg: '' };\n                        } catch (e) {\n                            return { ok: false, value: '', msg: 'Enter a valid URL (e.g., https://example.com)' };\n                        }\n                    },\n                    showToast(title, description, variant) {\n                        const form = document.createElement('form'); form.style.display = 'none';\n                        const ti = document.createElement('input'); ti.name = 'title'; ti.value = title; form.appendChild(ti);\n                        const di = document.createElement('input'); di.name = 'description'; di.value = description; form.appendChild(di);\n                        const vi = document.createElement('input'); vi.name = 'variant'; vi.value = variant; form.appendChild(vi);\n                        const ds = document.createElement('input'); ds.name = 'dismissible'; ds.value = 'on'; form.appendChild(ds);\n                        document.body.appendChild(form);\n                        if (window.htmx) { htmx.ajax('POST', '/api/htmx/toast', { source: form, target: '#toast-container', swap: 'afterbegin' }); }\n                        document.body.removeChild(form);\n                    },\n                    submit() {\n                        const out = this.validateAndNormalize(this.userUrl);\n                        if (!out.ok) { this.urlValid = false; this.errorMsg = out.msg; this.showToast('Invalid URL', out.msg, 'error'); return; }\n                        const url = out.value;\n                        this.urlValid = true; this.errorMsg = '';\n                        this.userUrl = url;\n                        // 1) Fade out title first (200ms)\n                        this.showTitle = false;\n                        // 2) After fade, move input towards top (300ms via margin change)\n                        setTimeout(() => { this.phase = 'qr'; }, 200);\n                        window.__qrLastUrl = url;\n                        // 3) Notify QR section after movement completes\n                        setTimeout(() => {\n                            window.dispatchEvent(new CustomEvent('set-qr-url', { detail: url }));\n                        }, 200 + 300);\n                    },\n                    resubmit() {\n                        const out = this.validateAndNormalize(this.userUrl);\n                        if (!out.ok) { this.urlValid = false; this.errorMsg = out.msg; this.showToast('Invalid URL', out.msg, 'error'); return; }\n                        const url = out.value; this.urlValid = true; this.errorMsg = ''; this.userUrl = url;\n                        window.__qrLastUrl = url;\n                        window.dispatchEvent(new CustomEvent('set-qr-url', { detail: url }));\n                    }\n                }\n            }\n        </script></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// HomePage renders the landing and QR UI inside the base layout
func HomePage() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = layouts.Layout("QR Code Generator â€“ qrcreator.link", homeContent()).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
