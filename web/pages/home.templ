package pages

import (
    "github.com/cristianadrielbraun/qrcreator.link/web/layouts"
    "github.com/cristianadrielbraun/qrcreator.link/web/components"
    "github.com/cristianadrielbraun/qrcreator.link/web/components/ui/input"
    "github.com/cristianadrielbraun/qrcreator.link/web/components/ui/button"
    "github.com/cristianadrielbraun/qrcreator.link/web/components/ui/icon"
    "github.com/cristianadrielbraun/qrcreator.link/web/components/ui/card"
)

// Home content: landing input + QR UI
templ homeContent() {
    <div x-data="qrLanding()" class="relative">
        <!-- Single input container: starts lower, then transitions margin to top -->
        <div class="mx-auto max-w-xl px-4 transition-all duration-300 ease-out"
             :class="phase === 'landing' ? 'mt-24' : 'mt-4'">
            <div class="text-center mb-3" x-show="showTitle" x-transition.opacity.duration.200ms>
                <h1 class="text-2xl md:text-3xl font-semibold tracking-tight">Create a QR from any URL</h1>
                <p class="text-sm text-slate-600 dark:text-slate-400 mt-2">Paste a link and press enter</p>
            </div>
            <div class="relative">
                @input.Input(input.Props{
                    Type:        input.TypeURL,
                    Placeholder: "https://example.com",
                    Required:    true,
                    Attributes: templ.Attributes{
                        "x-model":                    "userUrl",
                        "x-ref":                      "urlInput",
                        "@keydown.enter.prevent":     "phase==='landing' ? submit() : resubmit()",
                        "@input":                     "if (errorMsg && userUrl) { urlValid = true }",
                        ":aria-invalid":              "!urlValid && !!userUrl",
                        "aria-describedby":           "url-error",
                        "inputmode":                  "url",
                        "autocomplete":               "url",
                    },
                })
                @button.Button(button.Props{Size: button.SizeIcon, Variant: button.VariantDefault, Class: "absolute right-0 top-1/2 -translate-y-1/2", Attributes: templ.Attributes{"@click": "phase==='landing' ? submit() : resubmit()", "aria-label": "Generate QR"}}) {
                    @icon.ArrowRight(icon.Props{Size: 18})
                }
                <p id="url-error" x-show="!urlValid && !!userUrl" x-cloak class="mt-2 text-sm text-destructive">
                    <span x-text="errorMsg || 'Enter a valid URL (e.g., https://example.com)'"></span>
                </p>
            </div>
        </div>

        <!-- QR body under the top input -->
        <section x-show="phase === 'qr'" x-transition.opacity.duration.250ms class="mx-auto max-w-7xl px-4 mt-6">
            @components.QRCodeSection()

            <!-- Promo: Shortn Link -->
            <div class="mt-6">
                @card.Card() {
                    @card.Content() {
                        <div class="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
                            <div class="flex items-center gap-3">
                                <img src="/web/static/shortnlink-h-logo.svg" alt="Shortn Link" class="h-6 w-auto" />
                                <div>
                                    <div class="text-base font-semibold">Unlock more with Shortn Link</div>
                                    <p class="text-sm text-slate-600 dark:text-slate-400">Powerful link shortener with integrated QR, rich metrics, analytics, and reports.</p>
                                </div>
                            </div>
                            <div class="shrink-0">
                                @button.Button(button.Props{Href: "https://shortn.link/", Target: "_blank"}) { Explore Shortn Link }
                            </div>
                        </div>
                    }
                }
            </div>
        </section>

        <script>
            function qrLanding() {
                return {
                    phase: 'landing',
                    showTitle: true,
                    userUrl: '',
                    urlValid: true,
                    errorMsg: '',
                    validateAndNormalize(value) {
                        if (!value) { return { ok: false, value: '', msg: 'URL cannot be empty' }; }
                        let v = value.trim();
                        // If no scheme, assume https
                        if (!/^[a-zA-Z][a-zA-Z0-9+.-]*:/.test(v)) { v = 'https://' + v; }
                        try {
                            const u = new URL(v);
                            if (!/^https?:$/.test(u.protocol)) { return { ok: false, value: '', msg: 'Only http and https URLs are supported' }; }
                            if (!u.hostname) { return { ok: false, value: '', msg: 'URL must include a valid host' }; }
                            return { ok: true, value: u.toString(), msg: '' };
                        } catch (e) {
                            return { ok: false, value: '', msg: 'Enter a valid URL (e.g., https://example.com)' };
                        }
                    },
                    showToast(title, description, variant) {
                        const form = document.createElement('form'); form.style.display = 'none';
                        const ti = document.createElement('input'); ti.name = 'title'; ti.value = title; form.appendChild(ti);
                        const di = document.createElement('input'); di.name = 'description'; di.value = description; form.appendChild(di);
                        const vi = document.createElement('input'); vi.name = 'variant'; vi.value = variant; form.appendChild(vi);
                        const ds = document.createElement('input'); ds.name = 'dismissible'; ds.value = 'on'; form.appendChild(ds);
                        document.body.appendChild(form);
                        if (window.htmx) { htmx.ajax('POST', '/api/htmx/toast', { source: form, target: '#toast-container', swap: 'afterbegin' }); }
                        document.body.removeChild(form);
                    },
                    submit() {
                        const out = this.validateAndNormalize(this.userUrl);
                        if (!out.ok) { this.urlValid = false; this.errorMsg = out.msg; this.showToast('Invalid URL', out.msg, 'error'); return; }
                        const url = out.value;
                        this.urlValid = true; this.errorMsg = '';
                        this.userUrl = url;
                        // 1) Fade out title first (200ms)
                        this.showTitle = false;
                        // 2) After fade, move input towards top (300ms via margin change)
                        setTimeout(() => { this.phase = 'qr'; }, 200);
                        window.__qrLastUrl = url;
                        // 3) Notify QR section after movement completes
                        setTimeout(() => {
                            window.dispatchEvent(new CustomEvent('set-qr-url', { detail: url }));
                        }, 200 + 300);
                    },
                    resubmit() {
                        const out = this.validateAndNormalize(this.userUrl);
                        if (!out.ok) { this.urlValid = false; this.errorMsg = out.msg; this.showToast('Invalid URL', out.msg, 'error'); return; }
                        const url = out.value; this.urlValid = true; this.errorMsg = ''; this.userUrl = url;
                        window.__qrLastUrl = url;
                        window.dispatchEvent(new CustomEvent('set-qr-url', { detail: url }));
                    }
                }
            }
        </script>
    </div>
}

// HomePage renders the landing and QR UI inside the base layout
templ HomePage() {
    @layouts.Layout("QR Code Generator â€“ qrcreator.link", homeContent())
}
