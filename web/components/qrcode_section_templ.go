// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/cristianadrielbraun/qrcreator.link/web/components/ui/button"
	"github.com/cristianadrielbraun/qrcreator.link/web/components/ui/card"
	"github.com/cristianadrielbraun/qrcreator.link/web/components/ui/checkbox"
	"github.com/cristianadrielbraun/qrcreator.link/web/components/ui/icon"
	"github.com/cristianadrielbraun/qrcreator.link/web/components/ui/label"
	"github.com/cristianadrielbraun/qrcreator.link/web/components/ui/radio"
	"github.com/cristianadrielbraun/qrcreator.link/web/components/ui/separator"
	"github.com/cristianadrielbraun/qrcreator.link/web/components/ui/tabs"
	"github.com/cristianadrielbraun/qrcreator.link/web/components/ui/tooltip"
)

func QRCodeSection() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"space-y-6 relative\" x-data=\"qrCodeTabManager()\" x-init=\"(() => { if (window.__qrLastUrl) { setUrl(window.__qrLastUrl); initializeQR(); } setTimeout(() => window.dispatchEvent(new Event('resize')), 60); })()\" x-show=\"true\" @tab-changed.window=\"handleTabChange($event.detail)\" @set-qr-url.window=\"$event && setUrl($event.detail); initializeQR(); updateQRCode();\"><div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"><div class=\"space-y-6\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Var3 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
				templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
				templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
				if !templ_7745c5c3_IsBuffer {
					defer func() {
						templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err == nil {
							templ_7745c5c3_Err = templ_7745c5c3_BufErr
						}
					}()
				}
				ctx = templ.InitializeContext(ctx)
				templ_7745c5c3_Var4 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "Customization Options ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = card.Title().Render(templ.WithChildren(ctx, templ_7745c5c3_Var4), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				return nil
			})
			templ_7745c5c3_Err = card.Header().Render(templ.WithChildren(ctx, templ_7745c5c3_Var3), templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Var5 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
				templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
				templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
				if !templ_7745c5c3_IsBuffer {
					defer func() {
						templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err == nil {
							templ_7745c5c3_Err = templ_7745c5c3_BufErr
						}
					}()
				}
				ctx = templ.InitializeContext(ctx)
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<div class=\"space-y-6\"><div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var6 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "Color Mode ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = label.Label().Render(templ.WithChildren(ctx, templ_7745c5c3_Var6), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<div class=\"mt-2\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var7 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Var8 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
						templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
						templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
						if !templ_7745c5c3_IsBuffer {
							defer func() {
								templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
								if templ_7745c5c3_Err == nil {
									templ_7745c5c3_Err = templ_7745c5c3_BufErr
								}
							}()
						}
						ctx = templ.InitializeContext(ctx)
						templ_7745c5c3_Var9 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
							templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
							templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
							if !templ_7745c5c3_IsBuffer {
								defer func() {
									templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
									if templ_7745c5c3_Err == nil {
										templ_7745c5c3_Err = templ_7745c5c3_BufErr
									}
								}()
							}
							ctx = templ.InitializeContext(ctx)
							templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "Flat ")
							if templ_7745c5c3_Err != nil {
								return templ_7745c5c3_Err
							}
							return nil
						})
						templ_7745c5c3_Err = tabs.Trigger(tabs.TriggerProps{
							Value:      "flat",
							IsActive:   true,
							Attributes: templ.Attributes{"@click": "settings.colorMode = 'flat'; updateQRCode()"},
						}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var9), templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, " ")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Var10 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
							templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
							templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
							if !templ_7745c5c3_IsBuffer {
								defer func() {
									templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
									if templ_7745c5c3_Err == nil {
										templ_7745c5c3_Err = templ_7745c5c3_BufErr
									}
								}()
							}
							ctx = templ.InitializeContext(ctx)
							templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "Gradient ")
							if templ_7745c5c3_Err != nil {
								return templ_7745c5c3_Err
							}
							return nil
						})
						templ_7745c5c3_Err = tabs.Trigger(tabs.TriggerProps{
							Value:      "gradient",
							IsActive:   false,
							Attributes: templ.Attributes{"@click": "settings.colorMode = 'gradient'; updateQRCode()"},
						}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var10), templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						return nil
					})
					templ_7745c5c3_Err = tabs.List(tabs.ListProps{Class: "w-full"}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var8), templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = tabs.Tabs(tabs.Props{Class: "analytics-tabs"}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var7), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</div></div><template x-if=\"settings.colorMode === 'flat'\"><div x-cloak class=\"space-y-4\"><div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var11 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "Foreground ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = label.Label().Render(templ.WithChildren(ctx, templ_7745c5c3_Var11), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "<input type=\"color\" class=\"w-full h-10 rounded border border-gray-300 dark:border-gray-600 cursor-pointer mt-2\" x-model=\"settings.foregroundColor\" @change=\"updateQRCode()\"></div><div><div class=\"flex items-center justify-between mb-2\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var12 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "Background ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = label.Label().Render(templ.WithChildren(ctx, templ_7745c5c3_Var12), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "<div class=\"flex items-center space-x-2\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = checkbox.Checkbox(checkbox.Props{
					ID:   "transparent-bg",
					Name: "transparentBackground",
					Attributes: templ.Attributes{
						"x-model": "settings.transparentBackground",
						"@change": "updateQRCode()",
					},
				}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "<label for=\"transparent-bg\" class=\"text-xs text-gray-600 dark:text-gray-400 cursor-pointer whitespace-nowrap\">Transparent</label></div></div><input type=\"color\" class=\"w-full h-10 rounded border border-gray-300 dark:border-gray-600 cursor-pointer transition-opacity\" x-model=\"settings.backgroundColor\" x-bind:disabled=\"settings.transparentBackground\" x-bind:class=\"{ 'opacity-50 cursor-not-allowed': settings.transparentBackground }\" @change=\"updateQRCode()\"></div></div></template><template x-if=\"settings.colorMode === 'gradient'\"><div x-cloak class=\"space-y-6\"><div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var13 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "Foreground Gradient ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = label.Label().Render(templ.WithChildren(ctx, templ_7745c5c3_Var13), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "<div class=\"grid grid-cols-3 gap-3 mt-2\"><div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var14 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "Start ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = label.Label().Render(templ.WithChildren(ctx, templ_7745c5c3_Var14), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "<input type=\"color\" class=\"w-full h-10 rounded border border-gray-300 dark:border-gray-600 cursor-pointer\" x-model=\"settings.gradientStart\" @change=\"updateQRCode()\"></div><div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var15 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "Middle ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = label.Label().Render(templ.WithChildren(ctx, templ_7745c5c3_Var15), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "<input type=\"color\" class=\"w-full h-10 rounded border border-gray-300 dark:border-gray-600 cursor-pointer\" x-model=\"settings.gradientMiddle\" @change=\"updateQRCode()\"></div><div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var16 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "End ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = label.Label().Render(templ.WithChildren(ctx, templ_7745c5c3_Var16), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "<input type=\"color\" class=\"w-full h-10 rounded border border-gray-300 dark:border-gray-600 cursor-pointer\" x-model=\"settings.gradientEnd\" @change=\"updateQRCode()\"></div></div></div><div><div class=\"flex items-center justify-between mb-2\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var17 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "Background ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = label.Label().Render(templ.WithChildren(ctx, templ_7745c5c3_Var17), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, "<div class=\"flex items-center space-x-2\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = checkbox.Checkbox(checkbox.Props{
					ID:   "transparent-bg-gradient",
					Name: "transparentBackground",
					Attributes: templ.Attributes{
						"x-model": "settings.transparentBackground",
						"@change": "updateQRCode()",
					},
				}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "<label for=\"transparent-bg-gradient\" class=\"text-xs text-gray-600 dark:text-gray-400 cursor-pointer whitespace-nowrap\">Transparent</label></div></div><input type=\"color\" class=\"w-full h-10 rounded border border-gray-300 dark:border-gray-600 cursor-pointer transition-opacity\" x-model=\"settings.backgroundColor\" x-bind:disabled=\"settings.transparentBackground\" x-bind:class=\"{ 'opacity-50 cursor-not-allowed': settings.transparentBackground }\" @change=\"updateQRCode()\"></div></div></template>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = separator.Separator().Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 27, "<div class=\"space-y-4\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var18 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 28, "Frame Style ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = label.Label().Render(templ.WithChildren(ctx, templ_7745c5c3_Var18), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 29, "<div class=\"mt-2\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var19 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Var20 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
						templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
						templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
						if !templ_7745c5c3_IsBuffer {
							defer func() {
								templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
								if templ_7745c5c3_Err == nil {
									templ_7745c5c3_Err = templ_7745c5c3_BufErr
								}
							}()
						}
						ctx = templ.InitializeContext(ctx)
						templ_7745c5c3_Var21 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
							templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
							templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
							if !templ_7745c5c3_IsBuffer {
								defer func() {
									templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
									if templ_7745c5c3_Err == nil {
										templ_7745c5c3_Err = templ_7745c5c3_BufErr
									}
								}()
							}
							ctx = templ.InitializeContext(ctx)
							templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 30, "None ")
							if templ_7745c5c3_Err != nil {
								return templ_7745c5c3_Err
							}
							return nil
						})
						templ_7745c5c3_Err = tabs.Trigger(tabs.TriggerProps{Value: "none", IsActive: true, Attributes: templ.Attributes{"@click": "settings.cornerStyle = 'none'; updateQRCode()"}}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var21), templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 31, " ")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Var22 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
							templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
							templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
							if !templ_7745c5c3_IsBuffer {
								defer func() {
									templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
									if templ_7745c5c3_Err == nil {
										templ_7745c5c3_Err = templ_7745c5c3_BufErr
									}
								}()
							}
							ctx = templ.InitializeContext(ctx)
							templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 32, "Straight ")
							if templ_7745c5c3_Err != nil {
								return templ_7745c5c3_Err
							}
							return nil
						})
						templ_7745c5c3_Err = tabs.Trigger(tabs.TriggerProps{Value: "straight", Attributes: templ.Attributes{"@click": "settings.cornerStyle = 'straight'; updateQRCode()"}}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var22), templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 33, " ")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Var23 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
							templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
							templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
							if !templ_7745c5c3_IsBuffer {
								defer func() {
									templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
									if templ_7745c5c3_Err == nil {
										templ_7745c5c3_Err = templ_7745c5c3_BufErr
									}
								}()
							}
							ctx = templ.InitializeContext(ctx)
							templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 34, "Rounded ")
							if templ_7745c5c3_Err != nil {
								return templ_7745c5c3_Err
							}
							return nil
						})
						templ_7745c5c3_Err = tabs.Trigger(tabs.TriggerProps{Value: "rounded", Attributes: templ.Attributes{"@click": "settings.cornerStyle = 'rounded'; updateQRCode()"}}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var23), templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						return nil
					})
					templ_7745c5c3_Err = tabs.List(tabs.ListProps{Class: "w-full"}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var20), templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = tabs.Tabs(tabs.Props{Class: "analytics-tabs"}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var19), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 35, "</div><div x-show=\"settings.cornerStyle !== 'none'\" x-transition:enter=\"transition ease-out duration-300\" x-transition:enter-start=\"opacity-0 transform translate-y-2\" x-transition:enter-end=\"opacity-100 transform translate-y-0\" x-transition:leave=\"transition ease-in duration-200\" x-transition:leave-start=\"opacity-100 transform translate-y-0\" x-transition:leave-end=\"opacity-0 transform translate-y-2\" class=\"space-y-2\"><div class=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Border Pattern</div><div class=\"grid grid-cols-3 gap-2\"><label class=\"p-2 rounded-md border cursor-pointer grid gap-1 place-items-center\" x-bind:class=\"settings.borderPattern === 'simple' ? 'border-gray-900 dark:border-gray-100 ring-2 ring-primary' : 'border-gray-300 dark:border-gray-700'\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = radio.Radio(radio.Props{Name: "borderPattern", Value: "simple", Checked: true, Class: "hidden", Attributes: templ.Attributes{"@change": "settings.borderPattern = 'simple'; updateQRCode()"}}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 36, "<div class=\"w-6 h-6 border-2 border-gray-800 dark:border-gray-200\"></div><div class=\"text-xs font-medium\">Simple</div></label> <label class=\"p-2 rounded-md border cursor-pointer grid gap-1 place-items-center\" x-bind:class=\"settings.borderPattern === 'irregular' ? 'border-gray-900 dark:border-gray-100 ring-2 ring-primary' : 'border-gray-300 dark:border-gray-700'\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = radio.Radio(radio.Props{Name: "borderPattern", Value: "irregular", Class: "hidden", Attributes: templ.Attributes{"@change": "settings.borderPattern = 'irregular'; updateQRCode()"}}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 37, "<div class=\"w-6 h-6 relative overflow-hidden grid place-items-center\"><svg class=\"w-full h-full\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M1 2 L5 1.8 L9 2.2 L13 1.9 L17 2.1 L21 1.8 L23 2\" stroke=\"currentColor\" stroke-width=\"1.5\" fill=\"none\" class=\"text-gray-800 dark:text-gray-200\"></path> <path d=\"M2 2.8 L6 2.6 L10 3 L14 2.7 L18 2.9 L22 2.6\" stroke=\"currentColor\" stroke-width=\"0.8\" fill=\"none\" class=\"text-gray-800 dark:text-gray-200\"></path> <path d=\"M22 2 L22.2 6 L21.8 10 L22.1 14 L21.9 18 L22.2 22\" stroke=\"currentColor\" stroke-width=\"1.5\" fill=\"none\" class=\"text-gray-800 dark:text-gray-200\"></path> <path d=\"M21.2 3 L21.4 7 L21 11 L21.3 15 L21.1 19 L21.4 21\" stroke=\"currentColor\" stroke-width=\"0.8\" fill=\"none\" class=\"text-gray-800 dark:text-gray-200\"></path> <path d=\"M22 22 L18 22.2 L14 21.8 L10 22.1 L6 21.9 L2 22.2 L1 22\" stroke=\"currentColor\" stroke-width=\"1.5\" fill=\"none\" class=\"text-gray-800 dark:text-gray-200\"></path> <path d=\"M21 21.2 L17 21.4 L13 21 L9 21.3 L5 21.1 L2 21.4\" stroke=\"currentColor\" stroke-width=\"0.8\" fill=\"none\" class=\"text-gray-800 dark:text-gray-200\"></path> <path d=\"M2 2 L2.2 6 L1.8 10 L2.1 14 L1.9 18 L2.2 22\" stroke=\"currentColor\" stroke-width=\"1.5\" fill=\"none\" class=\"text-gray-800 dark:text-gray-200\"></path> <path d=\"M3 3 L3.2 7 L2.8 11 L3.1 15 L2.9 19 L3.2 21\" stroke=\"currentColor\" stroke-width=\"0.8\" fill=\"none\" class=\"text-gray-800 dark:text-gray-200\"></path></svg></div><div class=\"text-xs font-medium\">Irregular</div></label> <label class=\"p-2 rounded-md border cursor-pointer grid gap-1 place-items-center\" x-bind:class=\"settings.borderPattern === 'dashed' ? 'border-gray-900 dark:border-gray-100 ring-2 ring-primary' : 'border-gray-300 dark:border-gray-700'\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = radio.Radio(radio.Props{Name: "borderPattern", Value: "dashed", Class: "hidden", Attributes: templ.Attributes{"@change": "settings.borderPattern = 'dashed'; updateQRCode()"}}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 38, "<div class=\"w-6 h-6 border-2 border-dashed border-gray-800 dark:border-gray-200\"></div><div class=\"text-xs font-medium\">Dashed</div></label> <label class=\"p-2 rounded-md border cursor-pointer grid gap-1 place-items-center\" x-bind:class=\"settings.borderPattern === 'grid' ? 'border-gray-900 dark:border-gray-100 ring-2 ring-primary' : 'border-gray-300 dark:border-gray-700'\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = radio.Radio(radio.Props{Name: "borderPattern", Value: "grid", Class: "hidden", Attributes: templ.Attributes{"@change": "settings.borderPattern = 'grid'; updateQRCode()"}}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 39, "<div class=\"w-6 h-6 border-2 border-gray-800 dark:border-gray-200 relative overflow-hidden\"><div class=\"absolute inset-0 grid grid-cols-3 grid-rows-3 gap-px\"><div class=\"bg-gray-800 dark:bg-gray-200\"></div><div></div><div class=\"bg-gray-800 dark:bg-gray-200\"></div><div></div><div class=\"bg-gray-800 dark:bg-gray-200\"></div><div></div><div class=\"bg-gray-800 dark:bg-gray-200\"></div><div></div><div class=\"bg-gray-800 dark:bg-gray-200\"></div></div></div><div class=\"text-xs font-medium\">Grid</div></label> <label class=\"p-2 rounded-md border cursor-pointer grid gap-1 place-items-center\" x-bind:class=\"settings.borderPattern === 'double' ? 'border-gray-900 dark:border-gray-100 ring-2 ring-primary' : 'border-gray-300 dark:border-gray-700'\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = radio.Radio(radio.Props{Name: "borderPattern", Value: "double", Class: "hidden", Attributes: templ.Attributes{"@change": "settings.borderPattern = 'double'; updateQRCode()"}}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 40, "<div class=\"w-6 h-6 border-4 border-double border-gray-800 dark:border-gray-200\"></div><div class=\"text-xs font-medium\">Double</div></label> <label class=\"p-2 rounded-md border cursor-pointer grid gap-1 place-items-center\" x-bind:class=\"settings.borderPattern === 'diagonal' ? 'border-gray-900 dark:border-gray-100 ring-2 ring-primary' : 'border-gray-300 dark:border-gray-700'\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = radio.Radio(radio.Props{Name: "borderPattern", Value: "diagonal", Class: "hidden", Attributes: templ.Attributes{"@change": "settings.borderPattern = 'diagonal'; updateQRCode()"}}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 41, "<div class=\"w-6 h-6 relative overflow-hidden border-2 border-gray-800 dark:border-gray-200\"><svg class=\"absolute inset-0 w-full h-full\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M1 23 L23 1\" stroke=\"currentColor\" stroke-width=\"3\" class=\"text-gray-800 dark:text-gray-200\"></path></svg></div><div class=\"text-xs font-medium\">Diagonal</div></label></div></div><div x-show=\"settings.cornerStyle !== 'none'\" x-transition:enter=\"transition ease-out duration-300\" x-transition:enter-start=\"opacity-0 transform translate-y-2\" x-transition:enter-end=\"opacity-100 transform translate-y-0\" x-transition:leave=\"transition ease-in duration-200\" x-transition:leave-start=\"opacity-100 transform translate-y-0\" x-transition:leave-end=\"opacity-0 transform translate-y-2\" class=\"space-y-2\"><div class=\"flex items-center justify-between mb-2\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var24 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 42, "Border ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = label.Label().Render(templ.WithChildren(ctx, templ_7745c5c3_Var24), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 43, "<div class=\"flex items-center space-x-2\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = checkbox.Checkbox(checkbox.Props{ID: "same-color-border", Name: "sameColorBorder", Attributes: templ.Attributes{"x-model": "settings.sameColorBorder", "@change": "updateQRCode()"}}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 44, "<label for=\"same-color-border\" class=\"text-xs text-gray-600 dark:text-gray-400 cursor-pointer whitespace-nowrap\">Same as QR</label></div></div><input type=\"color\" class=\"w-full h-10 rounded border border-gray-300 dark:border-gray-600 cursor-pointer transition-opacity\" x-model=\"settings.borderColor\" x-bind:disabled=\"settings.sameColorBorder\" x-bind:class=\"{ 'opacity-50 cursor-not-allowed': settings.sameColorBorder }\" @change=\"updateQRCode()\"></div></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = separator.Separator().Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 45, "<div class=\"space-y-4\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var25 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 46, "QR Style ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = label.Label().Render(templ.WithChildren(ctx, templ_7745c5c3_Var25), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 47, "<div class=\"space-y-3\"><div><div class=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Shape</div><div class=\"grid grid-cols-3 gap-2\"><!-- Rectangle --><label class=\"p-2 rounded-md border cursor-pointer grid gap-1 place-items-center\" x-bind:class=\"settings.qrShape === 'rectangle' ? 'border-gray-900 dark:border-gray-100 ring-2 ring-primary' : 'border-gray-300 dark:border-gray-700'\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = radio.Radio(radio.Props{Name: "qrShape", Value: "rectangle", Checked: true, Class: "hidden", Attributes: templ.Attributes{"@change": "settings.qrShape = 'rectangle'; updateQRCode()"}}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 48, "<svg class=\"w-6 h-6\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"2\" y=\"2\" width=\"6\" height=\"6\" class=\"fill-gray-800 dark:fill-gray-200\"></rect> <rect x=\"16\" y=\"2\" width=\"6\" height=\"6\" class=\"fill-gray-800 dark:fill-gray-200\"></rect> <rect x=\"2\" y=\"9\" width=\"6\" height=\"6\" class=\"fill-gray-800 dark:fill-gray-200\"></rect> <rect x=\"9\" y=\"9\" width=\"6\" height=\"6\" class=\"fill-gray-800 dark:fill-gray-200\"></rect> <rect x=\"9\" y=\"16\" width=\"6\" height=\"6\" class=\"fill-gray-800 dark:fill-gray-200\"></rect> <rect x=\"16\" y=\"16\" width=\"6\" height=\"6\" class=\"fill-gray-800 dark:fill-gray-200\"></rect></svg><div class=\"text-xs font-medium\">Rectangle</div></label><!-- Circle --><label class=\"p-2 rounded-md border cursor-pointer grid gap-1 place-items-center\" x-bind:class=\"settings.qrShape === 'circle' ? 'border-gray-900 dark:border-gray-100 ring-2 ring-primary' : 'border-gray-300 dark:border-gray-700'\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = radio.Radio(radio.Props{Name: "qrShape", Value: "circle", Class: "hidden", Attributes: templ.Attributes{"@change": "settings.qrShape = 'circle'; updateQRCode()"}}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 49, "<svg class=\"w-6 h-6\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"5\" cy=\"5\" r=\"3\" class=\"fill-gray-800 dark:fill-gray-200\"></circle> <circle cx=\"19\" cy=\"5\" r=\"3\" class=\"fill-gray-800 dark:fill-gray-200\"></circle> <circle cx=\"5\" cy=\"12\" r=\"3\" class=\"fill-gray-800 dark:fill-gray-200\"></circle> <circle cx=\"12\" cy=\"12\" r=\"3\" class=\"fill-gray-800 dark:fill-gray-200\"></circle> <circle cx=\"12\" cy=\"19\" r=\"3\" class=\"fill-gray-800 dark:fill-gray-200\"></circle> <circle cx=\"19\" cy=\"19\" r=\"3\" class=\"fill-gray-800 dark:fill-gray-200\"></circle></svg><div class=\"text-xs font-medium\">Circle</div></label><!-- Liquid (copy from example) --><label class=\"p-2 rounded-md border cursor-pointer grid gap-1 place-items-center\" x-bind:class=\"settings.qrShape === 'liquid' ? 'border-gray-900 dark:border-gray-100 ring-2 ring-primary' : 'border-gray-300 dark:border-gray-700'\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = radio.Radio(radio.Props{Name: "qrShape", Value: "liquid", Class: "hidden", Attributes: templ.Attributes{"@change": "settings.qrShape = 'liquid'; updateQRCode()"}}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 50, "<svg class=\"w-6 h-6\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><!-- L-shaped connection with very rounded corners --><path d=\"M 5 2 L 5 2 Q 8 2 8 5 L 8 4 Q 8 9 11 9 L 12 9 Q 15 9 15 12 L 15 12 Q 15 15 12 15 L 5 15 Q 2 15 2 12 L 2 5 Q 2 2 5 2 Z\" class=\"fill-gray-800 dark:fill-gray-200\"></path><!-- Top right circle --><circle cx=\"19\" cy=\"5\" r=\"3\" class=\"fill-gray-800 dark:fill-gray-200\"></circle><!-- Bottom center and right connected squares with rounded corners --><path d=\"M 12 16 L 19 16 Q 22 16 22 19 L 22 19 Q 22 22 19 22 L 12 22 Q 9 22 9 19 L 9 19 Q 9 16 12 16 Z\" class=\"fill-gray-800 dark:fill-gray-200\"></path></svg><div class=\"text-xs font-medium\">Liquid</div></label><!-- Chain (copy from example) --><label class=\"p-2 rounded-md border cursor-pointer grid gap-1 place-items-center\" x-bind:class=\"settings.qrShape === 'chain' ? 'border-gray-900 dark:border-gray-100 ring-2 ring-primary' : 'border-gray-300 dark:border-gray-700'\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = radio.Radio(radio.Props{Name: "qrShape", Value: "chain", Class: "hidden", Attributes: templ.Attributes{"@change": "settings.qrShape = 'chain'; updateQRCode()"}}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 51, "<svg class=\"w-6 h-6\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><!-- Row 1: fill empty fill --><circle cx=\"5\" cy=\"5\" r=\"2\" class=\"fill-gray-800 dark:fill-gray-200\"></circle> <circle cx=\"19\" cy=\"5\" r=\"2\" class=\"fill-gray-800 dark:fill-gray-200\"></circle><!-- Vertical connection between top-left and middle-left --><line x1=\"5\" y1=\"7\" x2=\"5\" y2=\"10\" class=\"stroke-gray-800 dark:stroke-gray-200\" stroke-width=\"1.5\"></line><!-- Row 2: fill fill empty - with connection --><circle cx=\"5\" cy=\"12\" r=\"2\" class=\"fill-gray-800 dark:fill-gray-200\"></circle> <line x1=\"7\" y1=\"12\" x2=\"10\" y2=\"12\" class=\"stroke-gray-800 dark:stroke-gray-200\" stroke-width=\"1.5\"></line> <circle cx=\"12\" cy=\"12\" r=\"2\" class=\"fill-gray-800 dark:fill-gray-200\"></circle><!-- Row 3: empty fill fill - with connection --><circle cx=\"12\" cy=\"19\" r=\"2\" class=\"fill-gray-800 dark:fill-gray-200\"></circle> <line x1=\"14\" y1=\"19\" x2=\"17\" y2=\"19\" class=\"stroke-gray-800 dark:stroke-gray-200\" stroke-width=\"1.5\"></line> <circle cx=\"19\" cy=\"19\" r=\"2\" class=\"fill-gray-800 dark:fill-gray-200\"></circle></svg><div class=\"text-xs font-medium\">Chain</div></label><!-- H-Stripe (copy from example, value hstripe) --><label class=\"p-2 rounded-md border cursor-pointer grid gap-1 place-items-center\" x-bind:class=\"settings.qrShape === 'hstripe' ? 'border-gray-900 dark:border-gray-100 ring-2 ring-primary' : 'border-gray-300 dark:border-gray-700'\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = radio.Radio(radio.Props{Name: "qrShape", Value: "hstripe", Class: "hidden", Attributes: templ.Attributes{"@change": "settings.qrShape = 'hstripe'; updateQRCode()"}}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 52, "<svg class=\"w-6 h-6\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"2\" y=\"2\" width=\"20\" height=\"3\" class=\"fill-gray-800 dark:fill-gray-200\"></rect> <rect x=\"2\" y=\"6\" width=\"12\" height=\"3\" class=\"fill-gray-800 dark:fill-gray-200\"></rect> <rect x=\"16\" y=\"6\" width=\"6\" height=\"3\" class=\"fill-gray-800 dark:fill-gray-200\"></rect> <rect x=\"2\" y=\"10\" width=\"8\" height=\"3\" class=\"fill-gray-800 dark:fill-gray-200\"></rect> <rect x=\"12\" y=\"10\" width=\"10\" height=\"3\" class=\"fill-gray-800 dark:fill-gray-200\"></rect> <rect x=\"2\" y=\"14\" width=\"16\" height=\"3\" class=\"fill-gray-800 dark:fill-gray-200\"></rect> <rect x=\"2\" y=\"18\" width=\"10\" height=\"3\" class=\"fill-gray-800 dark:fill-gray-200\"></rect> <rect x=\"14\" y=\"18\" width=\"8\" height=\"3\" class=\"fill-gray-800 dark:fill-gray-200\"></rect></svg><div class=\"text-xs font-medium\">H-Stripe</div></label><!-- V-Stripe (copy from example, value vstripe) --><label class=\"p-2 rounded-md border cursor-pointer grid gap-1 place-items-center\" x-bind:class=\"settings.qrShape === 'vstripe' ? 'border-gray-900 dark:border-gray-100 ring-2 ring-primary' : 'border-gray-300 dark:border-gray-700'\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = radio.Radio(radio.Props{Name: "qrShape", Value: "vstripe", Class: "hidden", Attributes: templ.Attributes{"@change": "settings.qrShape = 'vstripe'; updateQRCode()"}}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 53, "<svg class=\"w-6 h-6\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"2\" y=\"2\" width=\"3\" height=\"20\" class=\"fill-gray-800 dark:fill-gray-200\"></rect> <rect x=\"6\" y=\"2\" width=\"3\" height=\"12\" class=\"fill-gray-800 dark:fill-gray-200\"></rect> <rect x=\"6\" y=\"16\" width=\"3\" height=\"6\" class=\"fill-gray-800 dark:fill-gray-200\"></rect> <rect x=\"10\" y=\"2\" width=\"3\" height=\"8\" class=\"fill-gray-800 dark:fill-gray-200\"></rect> <rect x=\"10\" y=\"12\" width=\"3\" height=\"10\" class=\"fill-gray-800 dark:fill-gray-200\"></rect> <rect x=\"14\" y=\"2\" width=\"3\" height=\"16\" class=\"fill-gray-800 dark:fill-gray-200\"></rect> <rect x=\"18\" y=\"2\" width=\"3\" height=\"10\" class=\"fill-gray-800 dark:fill-gray-200\"></rect> <rect x=\"18\" y=\"14\" width=\"3\" height=\"8\" class=\"fill-gray-800 dark:fill-gray-200\"></rect></svg><div class=\"text-xs font-medium\">V-Stripe</div></label></div></div></div></div></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				return nil
			})
			templ_7745c5c3_Err = card.Content().Render(templ.WithChildren(ctx, templ_7745c5c3_Var5), templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = card.Card().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 54, "</div><!-- Center + Right wrapper: add spacing on mobile; split on lg --><div class=\"space-y-6 lg:contents\"><!-- Center: Preview --><div class=\"space-y-6\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var26 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Var27 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
				templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
				templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
				if !templ_7745c5c3_IsBuffer {
					defer func() {
						templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err == nil {
							templ_7745c5c3_Err = templ_7745c5c3_BufErr
						}
					}()
				}
				ctx = templ.InitializeContext(ctx)
				templ_7745c5c3_Var28 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 55, "QR Preview ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = card.Title().Render(templ.WithChildren(ctx, templ_7745c5c3_Var28), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				return nil
			})
			templ_7745c5c3_Err = card.Header().Render(templ.WithChildren(ctx, templ_7745c5c3_Var27), templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 56, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Var29 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
				templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
				templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
				if !templ_7745c5c3_IsBuffer {
					defer func() {
						templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err == nil {
							templ_7745c5c3_Err = templ_7745c5c3_BufErr
						}
					}()
				}
				ctx = templ.InitializeContext(ctx)
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 57, "<div class=\"flex items-center justify-center\"><div class=\"relative\" x-data=\"{ observer: null }\" x-init=\"observer = new IntersectionObserver((entries) => { if (entries[0].isIntersecting) { initializeQR(); observer.disconnect(); } }, { threshold: 0.2 }); observer.observe($refs.previewContainer);\"><div class=\"flex items-center justify-center bg-transparent\" x-ref=\"previewContainer\" x-bind:style=\"'width:260px;height:290px'\"><img alt=\"QR Preview\" class=\"max-w-full max-h-full shadow-lg\" x-bind:src=\"previewImageUrl\"></div></div></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				return nil
			})
			templ_7745c5c3_Err = card.Content().Render(templ.WithChildren(ctx, templ_7745c5c3_Var29), templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = card.Card(card.Props{Class: "relative md:sticky md:top-6"}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var26), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 58, "</div><!-- Right: Actions --><div class=\"space-y-6\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var30 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Var31 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
				templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
				templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
				if !templ_7745c5c3_IsBuffer {
					defer func() {
						templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err == nil {
							templ_7745c5c3_Err = templ_7745c5c3_BufErr
						}
					}()
				}
				ctx = templ.InitializeContext(ctx)
				templ_7745c5c3_Var32 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 59, "Actions ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = card.Title().Render(templ.WithChildren(ctx, templ_7745c5c3_Var32), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				return nil
			})
			templ_7745c5c3_Err = card.Header().Render(templ.WithChildren(ctx, templ_7745c5c3_Var31), templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 60, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Var33 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
				templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
				templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
				if !templ_7745c5c3_IsBuffer {
					defer func() {
						templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err == nil {
							templ_7745c5c3_Err = templ_7745c5c3_BufErr
						}
					}()
				}
				ctx = templ.InitializeContext(ctx)
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 61, "<div class=\"space-y-5\"><div class=\"space-y-3\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var34 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 62, "<template x-if=\"isDownloading && downloadingFormat === 'PNG'\"><svg class=\"animate-spin h-4 w-4 mr-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"><circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle><path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 714 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path></svg></template><template x-if=\"!isDownloading || downloadingFormat !== 'PNG'\">")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = icon.Icon("download")(icon.Props{Size: 16, Class: "mr-2"}).Render(ctx, templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 63, "</template><span x-text=\"isDownloading && downloadingFormat === 'PNG' ? 'Generating PNG...' : 'Download PNG'\">Download PNG</span>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = button.Button(button.Props{FullWidth: true, Class: "border", Attributes: templ.Attributes{"@click": "download('PNG')", "x-bind:disabled": "isDownloading", "x-bind:class": "isDownloading ? 'opacity-50 cursor-not-allowed' : ''"}}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var34), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var35 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 64, "<template x-if=\"isDownloading && downloadingFormat === 'JPG'\"><svg class=\"animate-spin h-4 w-4 mr-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"><circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle><path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 714 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path></svg></template><template x-if=\"!isDownloading || downloadingFormat !== 'JPG'\">")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = icon.Icon("download")(icon.Props{Size: 16, Class: "mr-2"}).Render(ctx, templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 65, "</template><span x-text=\"isDownloading && downloadingFormat === 'JPG' ? 'Generating JPG...' : 'Download JPG'\">Download JPG</span>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Var36 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
						templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
						templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
						if !templ_7745c5c3_IsBuffer {
							defer func() {
								templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
								if templ_7745c5c3_Err == nil {
									templ_7745c5c3_Err = templ_7745c5c3_BufErr
								}
							}()
						}
						ctx = templ.InitializeContext(ctx)
						templ_7745c5c3_Var37 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
							templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
							templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
							if !templ_7745c5c3_IsBuffer {
								defer func() {
									templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
									if templ_7745c5c3_Err == nil {
										templ_7745c5c3_Err = templ_7745c5c3_BufErr
									}
								}()
							}
							ctx = templ.InitializeContext(ctx)
							templ_7745c5c3_Err = icon.Icon("info")(icon.Props{Size: 14}).Render(ctx, templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err != nil {
								return templ_7745c5c3_Err
							}
							return nil
						})
						templ_7745c5c3_Err = tooltip.Trigger(tooltip.TriggerProps{For: "jpg-tip", Class: "ml-2 inline-flex items-center text-slate-600 dark:text-slate-300"}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var37), templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 66, " ")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Var38 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
							templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
							templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
							if !templ_7745c5c3_IsBuffer {
								defer func() {
									templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
									if templ_7745c5c3_Err == nil {
										templ_7745c5c3_Err = templ_7745c5c3_BufErr
									}
								}()
							}
							ctx = templ.InitializeContext(ctx)
							templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 67, "<div class=\"text-xs leading-snug\"><div>JPG is a lossy format, and it doesn't support transparency.</div><div>Therefore, transparent backgrounds are flattened to white</div><div>For better results, consider using SVG or PNG</div></div>")
							if templ_7745c5c3_Err != nil {
								return templ_7745c5c3_Err
							}
							return nil
						})
						templ_7745c5c3_Err = tooltip.Content(tooltip.ContentProps{ID: "jpg-tip", Position: tooltip.PositionTop, ShowArrow: false, Class: "text-xs"}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var38), templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						return nil
					})
					templ_7745c5c3_Err = tooltip.Tooltip().Render(templ.WithChildren(ctx, templ_7745c5c3_Var36), templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = button.Button(button.Props{FullWidth: true, Class: "border", Attributes: templ.Attributes{"@click": "download('JPG')", "x-bind:disabled": "isDownloading", "x-bind:class": "isDownloading ? 'opacity-50 cursor-not-allowed' : ''"}}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var35), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var39 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 68, "<template x-if=\"isDownloading && downloadingFormat === 'SVG'\"><svg class=\"animate-spin h-4 w-4 mr-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"><circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle><path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 714 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path></svg></template><template x-if=\"!isDownloading || downloadingFormat !== 'SVG'\">")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = icon.Icon("download")(icon.Props{Size: 16, Class: "mr-2"}).Render(ctx, templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 69, "</template><span x-text=\"isDownloading && downloadingFormat === 'SVG' ? 'Generating SVG...' : 'Download SVG'\">Download SVG</span>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = button.Button(button.Props{FullWidth: true, Variant: button.VariantSecondary, Class: "border bg-teal-600 hover:bg-teal-700 text-white", Attributes: templ.Attributes{"@click": "isSVGAvailable ? download('SVG') : showSVGLimitation()", "x-bind:disabled": "isDownloading", "x-bind:class": "isDownloading ? 'opacity-50 cursor-not-allowed' : ''"}}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var39), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 70, "</div><div x-show=\"showSVGTooltip\" x-transition:enter=\"transition ease-out duration-200\" x-transition:enter-start=\"opacity-0 transform scale-95\" x-transition:enter-end=\"opacity-100 transform scale-100\" x-transition:leave=\"transition ease-in duration-150\" x-transition:leave-start=\"opacity-100 transform scale-100\" x-transition:leave-end=\"opacity-0 transform scale-95\" class=\"relative\"><div class=\"px-4 py-1 bg-gray-900 dark:bg-gray-700 text-white rounded-lg shadow-lg max-w-xs text-sm border border-gray-800 dark:border-gray-600\"><div class=\"font-medium mb-1\">SVG Not Available</div><div class=\"text-xs opacity-90\">SVG download is only available with flat colors and simple frame styles. Please change your settings to use SVG format.</div></div></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var40 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = icon.Icon("copy")(icon.Props{Size: 16, Class: "mr-2"}).Render(ctx, templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 71, " Copy to Clipboard ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = button.Button(button.Props{Variant: button.VariantOutline, Size: button.SizeSm, Class: "w-full transition-all", Attributes: templ.Attributes{"@click": "copyQR()", "x-bind:disabled": "isDownloading", "x-bind:class": "isDownloading ? 'opacity-50 cursor-not-allowed' : ''"}}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var40), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = separator.Separator().Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 72, "<div class=\"space-y-4 pt-2\"><div><div class=\"flex items-center justify-between mb-2\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var41 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 73, "HTML Embed ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = label.Label().Render(templ.WithChildren(ctx, templ_7745c5c3_Var41), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var42 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = icon.Icon("copy")(icon.Props{Size: 14}).Render(ctx, templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = button.Button(button.Props{Variant: button.VariantGhost, Size: button.SizeIcon, Attributes: templ.Attributes{"@click": "copyEmbed()"}}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var42), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 74, "</div><textarea readonly rows=\"2\" class=\"w-full h-[120px] px-3 py-2 text-xs font-mono bg-gray-50 dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none\" x-model=\"embedCode\"></textarea></div><div><div class=\"flex items-center justify-between mb-2\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var43 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 75, "Direct Image URL ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = label.Label().Render(templ.WithChildren(ctx, templ_7745c5c3_Var43), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var44 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = icon.Icon("copy")(icon.Props{Size: 14}).Render(ctx, templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = button.Button(button.Props{Variant: button.VariantGhost, Size: button.SizeIcon, Attributes: templ.Attributes{"@click": "copyDirectUrl()"}}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var44), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 76, "</div><textarea readonly rows=\"2\" class=\"w-full h-[120px] px-3 py-2 text-xs font-mono bg-gray-50 dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none\" x-model=\"directImageUrl\"></textarea></div></div></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				return nil
			})
			templ_7745c5c3_Err = card.Content().Render(templ.WithChildren(ctx, templ_7745c5c3_Var33), templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = card.Card().Render(templ.WithChildren(ctx, templ_7745c5c3_Var30), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 77, "</div></div></div><!-- Removed slider script since preview size is fixed --><script>\n            function qrCodeTabManager() {\n                return {\n                    url: '',\n                    previewSize: 528,\n                    previewImageUrl: '',\n                    settings: {\n                        colorMode: 'flat',\n                        foregroundColor: '#000000',\n                        backgroundColor: '#ffffff',\n                        transparentBackground: false,\n                        gradientStart: '#000000',\n                        gradientMiddle: '#808080',\n                        gradientEnd: '#ff0000',\n                        cornerStyle: 'none',\n                        borderPattern: 'simple',\n                        borderColor: '#000000',\n                        sameColorBorder: true,\n                        qrShape: 'rectangle',\n                        removeBranding: false,\n                        enableLogo: false,\n                        logoFile: null\n                    },\n                    embedCode: '',\n                    directImageUrl: '',\n                    updateTimeout: null,\n                    initialized: false,\n                    isDownloading: false,\n                    downloadingFormat: '',\n                    showSVGTooltip: false,\n                    get isSVGAvailable() {\n                        return this.settings.colorMode === 'flat' && (this.settings.cornerStyle === 'none' || this.settings.borderPattern === 'simple');\n                    },\n                    showSVGLimitation() {\n                        this.showSVGTooltip = true;\n                        setTimeout(() => { this.showSVGTooltip = false; }, 3000);\n                    },\n                    setUrl(linkUrl) { this.url = linkUrl; },\n                    initializeQR() {\n                        if (!this.initialized && this.url) {\n                            this.initialized = true;\n                            this.updateQRCode();\n                            this.updateEmbedCode();\n                        }\n                    },\n                    handleTabChange(tabValue) { if (tabValue === 'qr') { this.initializeQR(); } },\n                    updateQRCode() {\n                        if (!this.initialized) return;\n                        if (this.updateTimeout) { clearTimeout(this.updateTimeout); }\n                        this.updateTimeout = setTimeout(() => {\n                            this.updateEmbedCode();\n                            this.updateDirectUrl();\n                            \n                            this.loadQRPreview();\n                        }, 150);\n                    },\n                    updateEmbedCode() {\n                        const params = this.buildQRParams('download');\n                        this.embedCode = `<img src=\"${window.location.origin}/api/qr?${params}\" alt=\"QR Code\" style=\"max-width: 100%; height: auto;\" />`;\n                    },\n                    updateDirectUrl() {\n                        const params = this.buildQRParams('download');\n                        this.directImageUrl = `${window.location.origin}/api/qr?${params}`;\n                        \n                    },\n                    buildQRParams(size = 'preview') {\n                        const params = new URLSearchParams({\n                            url: this.url,\n                            colorMode: this.settings.colorMode,\n                            cornerStyle: this.settings.cornerStyle,\n                            borderPattern: this.settings.borderPattern,\n                            qrShape: this.settings.qrShape,\n                            size: size\n                        });\n                        if (this.settings.removeBranding) { params.set('branding', 'none'); } else { params.set('branding', 'default'); }\n                        if (this.settings.enableLogo && this.settings.logoFile) {\n                            params.set('centerLogo', 'true');\n                            if (typeof this.settings.logoFile === 'string') { params.set('logoFile', this.settings.logoFile); }\n                        }\n                        if (this.settings.transparentBackground) { params.set('bg', 'transparent'); } else { params.set('bg', this.settings.backgroundColor.replace('#', '')); }\n                        if (this.settings.colorMode === 'flat') {\n                            params.set('fg', this.settings.foregroundColor.replace('#', ''));\n                        } else {\n                            params.set('gradientStart', this.settings.gradientStart.replace('#', ''));\n                            params.set('gradientMiddle', this.settings.gradientMiddle.replace('#', ''));\n                            params.set('gradientEnd', this.settings.gradientEnd.replace('#', ''));\n                        }\n                        if (this.settings.cornerStyle !== 'none') {\n                            if (!this.settings.sameColorBorder) { params.set('borderColor', this.settings.borderColor.replace('#', '')); }\n                            params.set('borderPattern', this.settings.borderPattern);\n                        }\n                        params.set('previewSize', this.previewSize.toString());\n                        return params.toString();\n                    },\n                    async loadQRPreview() {\n                        try {\n                            const params = this.buildQRParams('preview');\n                            const url = `/api/qr?${params}`;\n                            this.previewImageUrl = url;\n                            \n                        } catch (e) { }\n                    },\n                    async download(format) {\n                        try {\n                            this.isDownloading = true; this.downloadingFormat = format;\n                            const params = this.buildQRParams('download');\n                            const fmt = (format || 'PNG').toLowerCase();\n                            const response = await fetch(`/api/qr?${params}&format=${fmt}`);\n                            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n                            const blob = await response.blob();\n                            const url = window.URL.createObjectURL(blob);\n                            const a = document.createElement('a'); a.href = url; a.download = `qr.${format.toLowerCase()}`; a.click(); window.URL.revokeObjectURL(url);\n                        } catch (e) { }\n                        finally { this.isDownloading = false; this.downloadingFormat = ''; window.dispatchEvent(new CustomEvent('qr-download-end')); }\n                    },\n                    async copyQR() {\n                        try {\n                            this.isDownloading = true; this.downloadingFormat = 'PNG';\n                            const params = this.buildQRParams('download');\n                            const response = await fetch(`/api/qr?${params}`);\n                            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n                            const blob = await response.blob();\n                            await navigator.clipboard.write([ new ClipboardItem({ [blob.type]: blob }) ]);\n                            this.showToast('Success', 'QR code copied to clipboard!', 'success');\n                        } catch (e) { this.showToast('Error', 'Failed to copy QR code', 'error'); }\n                        finally { this.isDownloading = false; this.downloadingFormat = ''; window.dispatchEvent(new CustomEvent('qr-download-end')); }\n                    },\n                    copyEmbed() { navigator.clipboard.writeText(this.embedCode); this.showToast('Success', 'Embed code copied to clipboard!', 'success'); },\n                    copyDirectUrl() { navigator.clipboard.writeText(this.directImageUrl); this.showToast('Success', 'Direct URL copied to clipboard!', 'success'); },\n                    shareQR() { if (typeof openQRShareModal === 'function') { openQRShareModal(this.directImageUrl, 'Check out this QR code'); } },\n                    showToast(title, description, variant) {\n                        const form = document.createElement('form'); form.style.display = 'none';\n                        const ti = document.createElement('input'); ti.name = 'title'; ti.value = title; form.appendChild(ti);\n                        const di = document.createElement('input'); di.name = 'description'; di.value = description; form.appendChild(di);\n                        const vi = document.createElement('input'); vi.name = 'variant'; vi.value = variant; form.appendChild(vi);\n                        const ds = document.createElement('input'); ds.name = 'dismissible'; ds.value = 'on'; form.appendChild(ds);\n                        document.body.appendChild(form);\n                        if (window.htmx) { htmx.ajax('POST', '/api/htmx/toast', { source: form, target: '#toast-container', swap: 'afterbegin' }); }\n                        document.body.removeChild(form);\n                    },\n                }\n            }\n            // Minimal stub to avoid errors if not defined elsewhere\n            window.openQRShareModal = window.openQRShareModal || function(url, text){ try { navigator.share && navigator.share({ url, text }); } catch(e){} };\n        </script></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
